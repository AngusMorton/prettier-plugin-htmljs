export interface Input<T> {
  options: T[];
  onSelect: (newVal: T) => unknown;
}

// htmljs can't parse the following type when formatted,
// the fix is to wrap the type alias in parenthesis so that
// htmljs can parse the full expression.
//
// To simplify the logic for ourselves, we should always wrap the
// expression of a type declaration with braces if it breaks.
//
// static type A2BSearchHeader<T> = Omit<
//   Input<T>,
//   "title" | "destination" | "origin"
// > & {
//   routes: string[];
//   destination: Input<T> & {
//     countryName: string;
//   };
//   origin: Input<T> & {
//     countryName: string;
//   };
// };
static type A2BSearchHeader2<T> = (Omit<
  Input<T>,
  "title" | "destination" | "origin"
> & {
  routes: string[];
  destination: Input<T> & {
    countryName: string;
  };
  origin: Input<T> & {
    countryName: string;
  };
});

// When scriptlets break and the scriptlet is a variable declaration
// it would be good to wrap the expression in parenthesis instead 
// of converting the scriptlet to a block.
// $ const isWebpSupported = $global.request.headers.get("accept")?.includes("image/webp");
// 
// Should be formatted to something like:
$ const isWebpSupported = ($global.request.headers
    .get("accept")
    ?.includes("image/webp")
);